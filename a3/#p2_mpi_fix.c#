// Same socket 16 procs: mpirun -mca plm_rsh_no_tree_spawn 1 --map-by ppr:16:socket -bind-to core -np 16 ./p1
// Between sockets 16 procs: mpirun -mca plm_rsh_no_tree_spawn 1 --map-by socket -bind-to core -np 16 ./p1
// Between nodes 16 procs: mpirun -mca plm_rsh_no_tree_spawn 1 --map-by node -bind-to core -np 16 -host en-openmpi00,en-openmpi02 ./p1
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <mpi.h>
#include <time.h>
#include <unistd.h>
#include <math.h>
#include <float.h>
#include <string.h>
#include <assert.h>

#define NUM_RUNS (1<<18)
//max msg length in bytes
#define MAX_MSG_LEN (1<<20)
#define SEED_RAND 97

#define N 1000
#define M 1000
#define NUM_PROCS 32
#define MAX_NUM_SWEEPS 50

#define MAX_COLS (NORMAL_COLS + NON_DIV_COLS) //max cols in a packet
#define NORMAL_COLS (N/(2*NUM_PROCS))
#define NON_DIV_COLS (N%(2*NUM_PROCS))


#define DEBUG(S, ...) printf("DEBUG (rank %d of %d): " S "\n", cord, nproc, ##__VA_ARGS__)
// Only the rank 0 process debugs
#define DEBUGR0(S, ...) if(ROOT()) DEBUG(S, ##__VA_ARGS__)

// The root node has cord 0
#define ROOT() !cord
#define SIGN(X) (-1 + (2*(X >= 0)))


int           blocklengths[] = {M*MAX_COLS, N*MAX_COLS, 1, 1};
MPI_Datatype types[] = {MPI_DOUBLE, MPI_DOUBLE, MPI_UNSIGNED, MPI_UNSIGNED};
MPI_Datatype mpi_colblock_type;


typedef struct ColBlock
{
  double A_s[M][MAX_COLS];
  double V_s[N][MAX_COLS];
  unsigned int ncols;
  unsigned int block_id;
} colblock_t;

typedef enum msg_tag
{
    TAG_EXCHANGE_BLOCK = 0,

} msg_tag_t;

static int myrank, nproc;
static MPI_Comm comm_cart;
static int cord;

void print_matrix(uint64_t m, uint64_t n, double data[m][n], bool matlab);
void init_MPI(int *argc, char ***argv);
void fill_crap(uint64_t m, uint64_t n, double data[m][n]);
void copy_cols(const uint32_t m, const uint32_t n, uint32_t startcol, uint32_t numcols, double A[m][n], double dest[m][numcols]);
bool jacobi_blocks(colblock_t *b1, colblock_t *b2);
uint32_t jacobi(const uint32_t m, const uint32_t n, double A[m][n], double V[n][n]);
bool jacobi_row(const uint32_t col_len_A, const uint32_t col_len_V, const uint32_t r1, const uint32_t r2,
		double A_j[col_len_A][r1], double A_k[col_len_A][r2], double V_j[col_len_V][r1], double V_k[col_len_V][r2],
        double *on, double *off);


int main(int argc, char **argv)
{
  srand(SEED_RAND);

  init_MPI(&argc, &argv);

  int name_len;
  char processor_name[MPI_MAX_PROCESSOR_NAME];
  MPI_Get_processor_name(processor_name, &name_len);
  DEBUG("Node '%s' (rank %d) online!", processor_name, cord);

  double (*A)[N] = (double (*)[N]) malloc(sizeof(double[M][N])); // MxN
  double (*V)[N] = (double (*)[N]) malloc(sizeof(double[N][N])); // NxN
  double (*S) = (double (*)) malloc(sizeof(double[N])); // 1d array of singular values

  if (!A | !V | !S) {
    DEBUG("Malloc failed!!");
    exit(1);
  }

  // eye(n)
  for (uint32_t i=0; i < N; i++) {
    for (uint32_t j=0; j < N; j++)
      V[i][j] = 0;
    V[i][i] = 1;
  }

  fill_crap(M, N, A);

  double start = MPI_Wtime();
  
  colblock_t *ob = malloc(3*sizeof(colblock_t));
  colblock_t *recv  = ob+2;


  if (ROOT()) {
    copy_cols(M, N, 0, MAX_COLS, A, ob[0].A_s);
    copy_cols(N, N, 0, MAX_COLS, V, ob[0].V_s);

    ob[0].ncols = MAX_COLS;
    ob[0].block_id = 0;
  } else {
    copy_cols(M, N, (2*NORMAL_COLS)*cord + NON_DIV_COLS, NORMAL_COLS, A, ob[0].A_s);
    copy_cols(N, N, (2*NORMAL_COLS)*cord + NON_DIV_COLS, NORMAL_COLS, V, ob[0].V_s);

    ob[0].ncols = NORMAL_COLS;
    ob[0].block_id = 2*cord;
    //print_matrix(M, N, A, true);
  }

  copy_cols(M, N, (2*NORMAL_COLS)*cord + NORMAL_COLS + NON_DIV_COLS, NORMAL_COLS, A, ob[1].A_s);
  copy_cols(N, N, (2*NORMAL_COLS)*cord + NORMAL_COLS + NON_DIV_COLS, NORMAL_COLS, V, ob[1].V_s);

  ob[1].ncols = NORMAL_COLS;
  ob[1].block_id = 2*cord + 1;


  struct timespec spec;
  clock_gettime(CLOCK_REALTIME, &spec);
  srand(spec.tv_nsec);

  uint32_t n=0;
  for (n=0; true; n++) {
    bool block_done = jacobi_blocks(ob, ob+1);

    //DEBUG("I have %u and %u", ob[0].block_id, ob[1].block_id);
    int rank_dest, rank_source, source;
    

    if (cord && cord != nproc - 1) {
	//move right odd to odd
	MPI_Cart_shift(comm_cart, 0, 1, &source, &rank_dest); //send
	MPI_Cart_shift(comm_cart, 0, -1, &source, &rank_source); //recv
	    
	MPI_Sendrecv(ob, 1, mpi_colblock_type, rank_dest, TAG_EXCHANGE_BLOCK,
		     recv, 1, mpi_colblock_type, rank_source, TAG_EXCHANGE_BLOCK,
		     comm_cart, MPI_STATUS_IGNORE);

	memcpy(ob, recv, sizeof(colblock_t));

	//move left even to even
	MPI_Sendrecv(ob+1, 1, mpi_colblock_type, rank_source, TAG_EXCHANGE_BLOCK,
		     recv, 1, mpi_colblock_type, rank_dest, TAG_EXCHANGE_BLOCK,
		     comm_cart, MPI_STATUS_IGNORE);

	memcpy(ob+1, recv, sizeof(colblock_t));
	    
    } else if (!cord) {
	//right even to odd
	MPI_Cart_shift(comm_cart, 0, 1, &source, &rank_dest); //send
	MPI_Cart_shift(comm_cart, 0, 1, &source, &rank_source); //recv

        MPI_Sendrecv(ob+1, 1, mpi_colblock_type, rank_dest, TAG_EXCHANGE_BLOCK,
	      recv, 1, mpi_colblock_type, rank_source, TAG_EXCHANGE_BLOCK,
	      comm_cart, MPI_STATUS_IGNORE);

	memcpy(ob+1, recv, sizeof(colblock_t));
    } else {
	//nproc - 1
	//move locally odd to even, and move left even to even
	MPI_Cart_shift(comm_cart, 0, -1, &source, &rank_dest); //send
	MPI_Cart_shift(comm_cart, 0, -1, &source, &rank_source); //recv

        MPI_Sendrecv(ob+1, 1, mpi_colblock_type, rank_dest, TAG_EXCHANGE_BLOCK,
	      recv, 1, mpi_colblock_type, rank_source, TAG_EXCHANGE_BLOCK,
	      comm_cart, MPI_STATUS_IGNORE);

	memcpy(ob+1, ob, sizeof(colblock_t));
	memcpy(ob, recv, sizeof(colblock_t));
    }
    
    /*
    int rank_dest, source;
    MPI_Cart_shift(comm_cart, 0, 1, &source, &rank_dest);
    int ts = rand()%2;

    MPI_Sendrecv(ob+ts, 1, mpi_colblock_type, rank_dest, TAG_EXCHANGE_BLOCK,
		 recv, 1, mpi_colblock_type, cord-1, TAG_EXCHANGE_BLOCK,
		 comm_cart, MPI_STATUS_IGNORE);
    memcpy(ob+ts, recv, sizeof(colblock_t));
    */
    bool all_done = false;
    if (!(n%nproc))
	MPI_Allreduce(&block_done, &all_done, 1, MPI_BYTE, MPI_LAND, comm_cart);

    if (all_done) {
        break;
    }
  }



  double rt = MPI_Wtime() - start;
  
  DEBUG("Completed in %u swaps, ~ %u sweeps\n", n, n/nproc);



  if (ROOT()) {
    colblock_t *res  = malloc(2*nproc*sizeof(colblock_t));
    MPI_Gather(ob, 2, mpi_colblock_type, res, 2, mpi_colblock_type, 0, comm_cart);
    //merge the blocks
    for (uint32_t i=0; i<2*nproc;i++) {
      // we need to recast it
      double (*Vres)[res[i].ncols] = (double (*)[res[i].ncols])res[i].V_s;
      double (*Ares)[res[i].ncols] = (double (*)[res[i].ncols])res[i].A_s;

      // merge A
      for (uint32_t j=0; j < M; j++) {
	for (uint32_t k=0; k < res[i].ncols; k++) {

	  if (!res[i].block_id) {
	    A[j][k] = Ares[j][k];
	  } else {

	    A[j][NORMAL_COLS*res[i].block_id + NON_DIV_COLS + k] = Ares[j][k];
	  }

	}

      }

      //merge V
      for (uint32_t j=0; j < N; j++) {
	for (uint32_t k=0; k < res[i].ncols; k++) {
	  if (!res[i].block_id) {
	    V[j][k] = Vres[j][k];
	  } else {
	    V[j][NORMAL_COLS*res[i].block_id + NON_DIV_COLS + k] = Vres[j][k];
	  }

	}

      }

    }
    DEBUG("Runtime %f seconds", rt);
    DEBUG("Restored A:");
    //print_matrix(M, N, A, true);
  } else {
    MPI_Gather(ob, 2, mpi_colblock_type, NULL, 2*nproc, mpi_colblock_type,
	       0, comm_cart);
  }



  MPI_Finalize();

}



void copy_cols(const uint32_t m, const uint32_t n,  uint32_t startcol, uint32_t numcols, double A[m][n], double dest[m][numcols])
{
  for (uint32_t i=0; i < m ; i++) { // rows
    for (uint32_t j=0; j < numcols; j++) {
      dest[i][j] = A[i][startcol+j];
    }
  }
}


bool jacobi_blocks(colblock_t *b1, colblock_t *b2)
{
  double on, off;
  double on_total=0, off_total=0;

  for (uint32_t i=0; i < b1->ncols; i++) {
    //zero itself first
    for (uint32_t j=i+1; j < b1->ncols; j++ ) {
        jacobi_row(M, N, b1->ncols, b1->ncols, (double (*)[b1->ncols])&b1->A_s[0][i], (double (*)[b1->ncols])&b1->A_s[0][j],
                (double (*)[b1->ncols])&b1->V_s[0][i], (double (*)[b1->ncols])&b1->V_s[0][j], &on, &off);
        off_total += off;
	}

    for (uint32_t j=0; j < b2->ncols; j++ ) {
        jacobi_row(M, N, b1->ncols, b2->ncols, (double (*)[b1->ncols])&b1->A_s[0][i], (double (*)[b2->ncols])&b2->A_s[0][j],
                    (double (*)[b1->ncols])&b1->V_s[0][i], (double (*)[b2->ncols])&b2->V_s[0][j], &on, &off);
        off_total += off;
	}
    on_total += on;
    //move onto b1 and b2
  }

  //just b2
  for (uint32_t i=0; i < b2->ncols; i++) {
    //zero itself first
    for (uint32_t j=i+1; j < b2->ncols; j++) {
      jacobi_row(M, N, b2->ncols, b2->ncols, (double (*)[b2->ncols])&b2->A_s[0][i], (double (*)[b2->ncols])&b2->A_s[0][j],
            (double (*)[b2->ncols])&b2->V_s[0][i], (double (*)[b2->ncols])&b2->V_s[0][j], &on, &off);
            on_total += on;
	}
    off_total += off;
  }

  return sqrt(off_total) <= DBL_EPSILON*(1+b1->ncols+b2->ncols)*sqrt(on_total);

}




// perform one jacobi rotation on cols A_j and A_k
bool jacobi_row(const uint32_t col_len_A, const uint32_t col_len_V, const uint32_t r1, const uint32_t r2,
		double A_j[col_len_A][r1], double A_k[col_len_A][r2], double V_j[col_len_V][r1], double V_k[col_len_V][r2],
        double *on, double *off)
{
  //simple check
  assert(A_j != A_k);
  assert(V_j != V_k);


  double a_jj = 0;
  double a_jk = 0;
  double a_kk = 0;

  // calc dot products
  for (uint32_t i=0; i < col_len_A; i++) {
    a_jj += A_j[i][0]*A_j[i][0]; // col a_j dot a_j
    a_jk += A_j[i][0]*A_k[i][0]; // col a_j dot a_k
    a_kk += A_k[i][0]*A_k[i][0]; // col a_k dot a_k
  }

  *off = 2*(a_jk*a_jk); // add the off diagnol
  *on = a_jj*a_jj;

  double tau = (a_kk-a_jj)/(2*a_jk);
  double t = 1/(tau + SIGN(tau)*sqrt(1+tau*tau));
  double c = 1/sqrt(1+t*t); //cos
  double s = c*t; //sin

  //update A
  for (uint32_t i=0; i < col_len_A; i++) {
    //save ith row of A, cols j and k
    double a_jk[2] = {A_j[i][0], A_k[i][0] };
    A_j[i][0] = a_jk[0]*c - a_jk[1]*s;
    A_k[i][0] = a_jk[0]*s + a_jk[1]*c;
  }
  //update V
  for (uint32_t i=0; i < col_len_V; i++) {
    //save ith row of V, cols j and k
    double v_jk[2] = {V_j[i][0], V_k[i][0] };
    V_j[i][0] = v_jk[0]*c - v_jk[1]*s;
    V_k[i][0] = v_jk[0]*s + v_jk[1]*c;
  }

  return (sqrt(*off) <= DBL_EPSILON*sqrt(*on));

}



uint32_t jacobi(const uint32_t m, const uint32_t n, double A[m][n], double V[n][n])
{
  // Terminating conditon sqrt(off) < DBL_EPSILON*N*sqrt(on)
  uint32_t num;
  double on, off;
  double on_total=0, off_total=INFINITY;
  for (num=0; num < MAX_NUM_SWEEPS && sqrt(off_total) > DBL_EPSILON*n*sqrt(on_total); num++) {
      on_total = 0;
      off_total = 0;
    for (uint32_t j=0; j < n; j++) {
      for (uint32_t k=j+1; k < n; k++) {
	     jacobi_row(M, N, N, N, (double (*)[n])&A[0][j], (double (*)[n])&A[0][k],
			  (double (*)[n])&V[0][j], (double (*)[n])&V[0][k], &on, &off);
         on_total += on; //ad the on diagnol
      }
      off_total += off; // only need A_jj on the last iteration
    }
  } //endsweep

  return num;
}






void fill_crap(uint64_t m, uint64_t n, double data[m][n])
{
  for (uint64_t i=0; i<m; i++) {

    for (uint64_t j=0; j < n; j++) {
      data[i][j] = ((double)rand())/((double)RAND_MAX);
    }

  }

}



void init_MPI(int *argc, char ***argv)
{
  MPI_Init(argc, argv);
  MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
  MPI_Comm_size(MPI_COMM_WORLD, &nproc);

  int dim = NUM_PROCS;
  int periodic = 0x01;
  MPI_Cart_create(MPI_COMM_WORLD, 1, &dim, &periodic, true, &comm_cart);

  if (comm_cart == MPI_COMM_NULL) {
    DEBUG("Got NULL for MPI_Cart_create, exiting");
    MPI_Finalize();
    exit(1);
  }

  MPI_Comm_rank(comm_cart, &myrank);
  MPI_Comm_size(comm_cart, &nproc);
  MPI_Cart_coords(comm_cart, myrank, 1, &cord);

  //init the new datatype
  MPI_Aint     offsets[4];
  colblock_t *tmp = malloc(sizeof(colblock_t));
  MPI_Address(tmp, &offsets[0]);
  MPI_Address(&tmp->V_s, &offsets[1]);
  MPI_Address(&tmp->ncols, &offsets[2]);
  MPI_Address(&tmp->block_id, &offsets[3]);
  free(tmp);

  offsets[1] -=  offsets[0];
  offsets[2] -=  offsets[0];
  offsets[3] -= offsets[0];
  offsets[0] = 0;


  MPI_Type_create_struct(4, blocklengths, offsets, types, &mpi_colblock_type);
  MPI_Type_commit(&mpi_colblock_type);

}


void print_matrix(uint64_t m, uint64_t n, double data[m][n], bool matlab)
{
  if (matlab)
    printf("[ ");
  for (uint64_t i=0; i< m; i++) {

    for (uint64_t j=0; j < n-1; j++) {
      printf("%.4f, ", data[i][j]);
    }
    printf(matlab ? "%.4f; " : "%.4f\n", data[i][n-1]);
  }

  if (matlab)
    printf("]\n");
}
